name: Main Branch Pipeline
on:
  workflow_call:
    inputs:
      componentName:
        required: true
        type: string
    secrets:
      VAULT_TOKEN:
        required: true

run-name: ${{ github.sha }} | ${{ github.event.head_commit.message }}
jobs:
  UNIT-TESTS:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo
          
  SECURITY-SCANS:
    runs-on: self-hosted
    needs: UNIT-TESTS
    steps:
      - uses: actions/checkout@v4
      - name: Import SonarQube Secrets
        id: sonarqube
        uses: hashicorp/vault-action@v2
        with:
          url: http://vault-internal.tejadevopsb81.icu:8200
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            infra-secrets/data/sonarqube username | sonar_user ;
            infra-secrets/data/sonarqube password | sonar_pass ;
      - name: Code Quality Checks
        run: echo /sonar-scanner/sonar-scanner-6.1.0.4477-linux-x64/bin/sonar-scanner -Dsonar.host.url=http://sonarqube-internal.tejadevopsb81.icu:9000 -Dsonar.login=${{ steps.sonarqube.outputs.sonar_user }} -Dsonar.password=${{ steps.sonarqube.outputs.sonar_pass }} -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${{ inputs.componentName }}
      - name: SAST Scan
        run: echo SAST Scan
      - name: SCA Check
        run: echo SCA Check

  build:
    runs-on: self-hosted
    needs: SECURITY-SCANS
    steps:
      - uses: actions/checkout@v4
      - run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 418272784676.dkr.ecr.us-east-1.amazonaws.com
          if [ ${{ inputs.componentName }} == "shipping" ]; then
            curl -v -L -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip
            unzip newrelic-java.zip
          fi
          docker build -t 418272784676.dkr.ecr.us-east-1.amazonaws.com/roboshop-${{ inputs.componentName }}:${{ github.sha }} .
          docker push 418272784676.dkr.ecr.us-east-1.amazonaws.com/roboshop-${{ inputs.componentName }}:${{ github.sha }}

  DEV:
    runs-on: self-hosted
    needs: build
    environment: DEV
    steps:
      - uses: actions/checkout@v4
        name: Checkout Code
      - run: |
          aws eks update-kubeconfig --name dev-eks
          PASS=$(kubectl get secrets argocd-initial-admin-secret -n argocd --template={{.data.password}} | base64 -d)
          argocd login argocd-dev.tejadevopsb81.icu --username admin --password $PASS --insecure --skip-test-tls --grpc-web
        name: ArgoCD login
      - run: |
          argocd app create ${{ inputs.componentName }} --repo https://github.com/tejadevsecops/roboshop-helm.git --path . --dest-namespace default --dest-server https://kubernetes.default.svc --values env-dev/${{ inputs.componentName }}.yaml --helm-set COMMIT_ID=${{ github.sha }} --upsert
          argocd app sync ${{ inputs.componentName }}
        name: ArgoCD App create and sync
  QA:
    runs-on: self-hosted
    needs: DEV
    environment: QA
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo

  E2E-TESTS:
    runs-on: self-hosted
    needs: QA
    environment: QA
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo  

  UAT:
    runs-on: self-hosted
    needs: E2E-TESTS
    environment: UAT
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo

  PROD:
    runs-on: self-hosted
    needs: UAT
    environment: PROD
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo